import 'dart:io';
import 'dart:ui' as ui;
import 'package:flutter_native_image/flutter_native_image.dart';
import 'package:image/image.dart' as imagi;
import 'package:ardunio_image/headers.dart';
import 'package:image/image.dart';

enum ImageState { select, selected, croped, uploading, completed }

class ImageController extends GetxController {
  GlobalKey one = GlobalKey();
  final state = ImageState.select.obs;
  final selectedImagePath = ''.obs;
  final selectedImageSize = ''.obs;
  final size = const Size(16, 16).obs;

  final cropImagePath = ''.obs;
  final cropImageSize = ''.obs;

  final compressImagePath = ''.obs;
  final compressImageSize = ''.obs;

  Future<List<Uint8List>> extractGifFrames(File img) async {
    final List<Uint8List> imagess = [];
    final bytes = await img.readAsBytes();
    // print('Unavle');

    final decoder = imagi.GifDecoder();
    decoder.decode(bytes);

    print('frames ${decoder.numFrames()}');
    for (int i = 0; i < decoder.numFrames(); i++) {
      final decodedImg = decoder.decodeFrame(i);

      // final compressImg = copyResize(
      //   decodedImg!,
      //   width: 16,
      //   height: 16,
      //   // interpolation: Interpolation
      // );
      // print('${compressImg!.height} x ${compressImg!.width}');
      // final croppedImg = copyCrop(
      //   // compressImg,
      //   decodedImg!,
      //   x: 0,
      //   y: 0,
      //   width: 16,
      //   height: 16,
      // ); // Adjust the crop dimensions as desired
      final decodedBytes = decodedImg!.getBytes(order: imagi.ChannelOrder.rgb);

      print('${decodedImg!.height} x ${decodedImg!.width}');

      final dir = Directory.systemTemp;
      final targetPath = '${dir.absolute.path}/temp${i}.jpg';
      final newSourcetargetPath = '${dir.absolute.path}/c-temp${i}.jpg';
      final ins = imagi.encodeJpg(decodedImg, quality: 100);
      final val = await imagi.writeFile(targetPath, ins);

      print('is Success $val');
      // final cropImageFile = await ImageCropper().cropImage(
      //   sourcePath: targetPath,
      //   maxHeight: 16,
      //   maxWidth: 16,
      //   aspectRatio:
      //       CropAspectRatio(ratioY: 16.toDouble(), ratioX: 16.toDouble()),
      //   compressFormat: ImageCompressFormat.jpg,
      //   compressQuality: 100,
      // );

      // if (cropImageFile == null) {
      //   Get.snackbar('Error', 'Please Select Image Again');
      //   state.value = ImageState.select;
      //   print('HI Error');
      //   // return;
      // }
      // selectedImagePath.value = cropImageFile!.path;
      final cropImageFile = await ImageCropper().cropImage(
        sourcePath: targetPath,
        maxHeight: 16,
        maxWidth: 16,
        aspectRatio:
            CropAspectRatio(ratioY: 16.toDouble(), ratioX: 16.toDouble()),
        compressFormat: ImageCompressFormat.jpg,
        compressQuality: 100,
      );

      if (cropImageFile == null) {
        Get.snackbar('Error', 'Please Select Image Again');
        state.value = ImageState.select;
        print('HI Error');
        // return;
      }

      print('No Erro ${cropImageFile!.path}');
      cropImagePath.value = cropImageFile!.path;
      cropImageSize.value = _getFileSize(cropImagePath.value);
      state.value = ImageState.croped;

      final compressedFile = await FlutterImageCompress.compressAndGetFile(
        cropImagePath.value,
        newSourcetargetPath,
        minHeight: 16,
        minWidth: 16,
        quality: 100,
      );
      if (compressedFile == null) {
        Get.snackbar('Error', 'Unable To Compress Image, Please Try Again');
        state.value = ImageState.select;
      }
      print('Comrepss path ${compressedFile!.path}');
      print('Comrepss path ${newSourcetargetPath}');
      final v = await convertImage(newSourcetargetPath, height: 16, width: 16);
      // final v = await readFile(newSourcetargetPath);

      print(v!.length);
      print(v.toString());

      state.value = ImageState.select;
      selectedImagePath.value = newSourcetargetPath;
      state.value = ImageState.croped;
      await Future.delayed(Duration(seconds: 2));
      // // final decodedBytes = decodedImg.getBytes(order: imagi.ChannelOrder.rgb);
      // print('in Read Image');
      // print('Decoded Bytes Length ${decodedBytes.length}');
      // print('Decoded Bytes $decodedBytes');
      imagess.add(v);
      // return decodedBytes;
      // do something with frame
    }
    return imagess;
  }

  void getImage(ImageSource imageSource,
      {int height = 16, int width = 16}) async {
    // final pickedFile = await ImagePicker().pickImage(
    //   source: imageSource,
    // );
    // if (pickedFile == null) {
    //   Get.snackbar('Error', 'Please Select Image Again');
    //   state.value = ImageState.select;
    //   return;
    // }

    // selectedImagePath.value = '';
    // compressImagePath.value = '';
    // selectedImagePath.value = pickedFile!.path;
    selectedImagePath.value =
        '/data/user/0/com.example.ardunio_image/code_cache/c-temp7.jpg';
    selectedImageSize.value = _getFileSize(selectedImagePath.value);
    state.value = ImageState.selected;
//    Crop File
    print('Height $height Width $width');
    final cropImageFile = await ImageCropper().cropImage(
      sourcePath: selectedImagePath.value,
      maxHeight: height,
      maxWidth: width,
      aspectRatio:
          CropAspectRatio(ratioY: height.toDouble(), ratioX: width.toDouble()),
      compressFormat: ImageCompressFormat.jpg,
      compressQuality: 100,
    );

    if (cropImageFile == null) {
      Get.snackbar('Error', 'Please Select Image Again');
      state.value = ImageState.select;
      print('HI Error');
      return;
    }

    print('No Erro ${cropImageFile!.path}');
    cropImagePath.value = cropImageFile!.path;
    cropImageSize.value = _getFileSize(cropImagePath.value);
    state.value = ImageState.croped;

    final dir = Directory.systemTemp;
    final targetPath = '${dir.absolute.path}/temp.jpeg';

    final compressedFile = await FlutterImageCompress.compressAndGetFile(
      cropImagePath.value,
      targetPath,
      quality: 90,
    );
    if (compressedFile == null) {
      Get.snackbar('Error', 'Unable To Compress Image, Please Try Again');
      state.value = ImageState.select;
    }
    compressImagePath.value = compressedFile!.path;
    compressImageSize.value = _getFileSize(compressImagePath.value);
    state.value = ImageState.croped;
    print('Here');
    readImage(File(compressImagePath.value));

    // uploadImage(comressFiles);
    // } else {
    //   Get.snackbar('Error', 'No Image Selected',
    //       snackPosition: SnackPosition.BOTTOM);
    // }
  }

  Future<Uint8List?> convertImage(String imgPath,
      {int height = 16, int width = 16}) async {
    selectedImagePath.value = imgPath;
    selectedImageSize.value = _getFileSize(selectedImagePath.value);
    state.value = ImageState.selected;
//    Crop File
    print('Height $height Width $width');
    final cropImageFile = await ImageCropper().cropImage(
      sourcePath: selectedImagePath.value,
      maxHeight: height,
      maxWidth: width,
      aspectRatio:
          CropAspectRatio(ratioY: height.toDouble(), ratioX: width.toDouble()),
      compressFormat: ImageCompressFormat.jpg,
      compressQuality: 100,
    );

    if (cropImageFile == null) {
      Get.snackbar('Error', 'Please Select Image Again');
      state.value = ImageState.select;
      print('HI Error');
      return null;
    }

    print('No Erro ${cropImageFile!.path}');
    cropImagePath.value = cropImageFile!.path;
    cropImageSize.value = _getFileSize(cropImagePath.value);
    state.value = ImageState.croped;

    final dir = Directory.systemTemp;
    final targetPath = '${dir.absolute.path}/temp.jpeg';

    final compressedFile = await FlutterImageCompress.compressAndGetFile(
      cropImagePath.value,
      targetPath,
      quality: 90,
    );
    if (compressedFile == null) {
      Get.snackbar('Error', 'Unable To Compress Image, Please Try Again');
      state.value = ImageState.select;
    }
    compressImagePath.value = compressedFile!.path;
    compressImageSize.value = _getFileSize(compressImagePath.value);
    state.value = ImageState.croped;
    print('Here');
    return await readImage(File(compressImagePath.value));

    // uploadImage(comressFiles);
    // } else {
    //   Get.snackbar('Error', 'No Image Selected',
    //       snackPosition: SnackPosition.BOTTOM);
    // }
  }

  List<String> imgArray = [];
  Future<Uint8List> readImage(File img) async {
    imgArray.clear();
    final bytes = await img.readAsBytes();
    final decoder = imagi.JpegDecoder();
    final decodedImg = decoder.decode(bytes);
    final decodedBytes = decodedImg!.getBytes(order: imagi.ChannelOrder.rgb);
    print('Decoded Bytes Length ${decodedBytes.length}');
    print('Decoded Bytes $decodedBytes');
    print('${decodedImg!.height} x ${decodedImg!.width}');

    return decodedBytes;
    // int loopLimit = decodedImg.width * decodedImg.height;
    // // int loopLimit = 1000;
    // for (int i = 0; i < decodedImg.height; i++) {
    //   for (int j = 0; j < decodedImg.width; j++) {
    //     int red = decodedBytes[(i * j) * 3];
    //     int green = decodedBytes[(i * j) * 3 + 1];
    //     int blue = decodedBytes[(i * j) * 3 + 2];
    //     imgArray.add(convertToHex([red, green, blue]));
    //   }
    // }

    // print('ImageArrayLength : ${imgArray.length}');
    // print('content : ${imgArray.toString()}');

    // String d = '';
    // for (int i = 0; i < decodedImg.height; i++) {
    //   for (int j = 0; j < decodedImg.width; j++) {
    //     d += '${imgArray[i]}, ';
    //   }
    //   d += '\n';
    // }
    // for (int i = 0; i < 256; i++) {}
    // FlutterClipboard.copy(d)
    //     .then((value) => Get.snackbar('Coppied', 'Valued Coppied '));
  }

  void getGifImage(ImageSource imageSource,
      {int height = 16, int width = 16}) async {
    final pickedFile = await ImagePicker().pickImage(
      source: imageSource,
    );
    if (pickedFile == null) {
      Get.snackbar('Error', 'Please Select Image Again');
      state.value = ImageState.select;
      return;
    }

    selectedImagePath.value = '';
    compressImagePath.value = '';
    ImageState.select;
    selectedImagePath.value = pickedFile.path;
    selectedImageSize.value = _getFileSize(selectedImagePath.value);
    state.value = ImageState.selected;
    state.value = ImageState.croped;

    // final dir = Directory.systemTemp;
    // // final targetPath = '${dir.absolute.path}/temp.jpeg';
    // final targetPath = '${dir.absolute.path}/temp.webp';

    // final compressedFile = await FlutterImageCompress.compressAndGetFile(
    //   // cropImagePath.value,
    //   selectedImagePath.value,
    //   targetPath,
    //   quality: 90,
    //   format: CompressFormat.webp,
    // );

    // if (compressedFile == null) {
    //   Get.snackbar('Error', 'Unable To Compress Image, Please Try Again');
    //   state.value = ImageState.select;
    // }

    // print(' Length is ${await compressedFile!.length()}');
    // compressImagePath.value = compressedFile!.path;
    // compressImageSize.value = _getFileSize(compressImagePath.value);
    // state.value = ImageState.croped;

    // // final cropImageFile = await ImageCropper().cropImage(
    // //   sourcePath: selectedImagePath.path,
    // //   aspectRatio:
    // //       CropAspectRatio(ratioX: width.toDouble(), ratioY: height.toDouble()),
    // // );

    // // if (cropImageFile == null) {
    // //   Get.snackbar('Error', 'Please Select Image Again');
    // //   state.value = ImageState.select;
    // //   print('HI Error');
    // //   return;
    // // }

    // // print('No Erro ${cropImageFile!.path}');
    // // cropImagePath.value = croppedImageFile.path;
    // cropImagePath.value = compressImagePath.value;
    // cropImageSize.value = _getFileSize(cropImagePath.value);
    // state.value = ImageState.croped;

    // final s = await extractGifFrames(File(compressImagePath.value));
    print(selectedImagePath.value);
    final s = await extractGifFrames(
      File(selectedImagePath.value),
    );
    print(s.length);
    // readGifImage(File(cropImagePath.value));
  }

  Future<Uint8List> readGifImage(File img) async {
    print('Read Image Path  ${img.path} path');
    imgArray.clear();
    final bytes = await img.readAsBytes();
    // final decoder = imagi.WebPDecoder();
    final decoder = imagi.GifDecoder();
    // final decoder = imagi.GifDecoder();
    try {
      final decodedImg = decoder.decode(bytes);

      if (decodedImg == null) {
        Get.snackbar('Erro ', 'Decoded null');
      } else {
        print(' No of frames  ${decodedImg.frames.length}');
        final decodedBytes =
            decodedImg!.getBytes(order: imagi.ChannelOrder.rgb);
        print('in Read Image');
        print('Decoded Bytes Length ${decodedBytes.length}');
        print('Decoded Bytes $decodedBytes');
        return decodedBytes;
      }
    } catch (e) {
      print('Errro $e');
    }
    return Uint8List(2);
  }

  // Future<List<List<int>>> extractGifFrames(String gifFilePath) async {
  //   final gifBytes = await FlutterImageCompress.compressWithFile(
  //     gifFilePath,
  //     minWidth: 0,
  //     minHeight: 0,
  //     quality: 100,
  //     format: CompressFormat.gif,
  //   );

  //   final gifData = GifData(gifBytes);
  //   final frameCount = gifData.frameCount;
  //   final frames = <List<int>>[];

  //   for (var i = 0; i < frameCount; i++) {
  //     final frame = gifData.frame(i).frameBytes;
  //     frames.add(frame);
  //   }

  //   return frames;
  // }

  List<String> convertToHexString(List<List<int>> rgbList) {
    List<String> hexList = [];
    print('RGB LENGTH IS  ${rgbList.length / 16}');

    for (List<int> rgb in rgbList) {
      final String hex = rgb
          .map((int value) => value.toRadixString(16).padLeft(2, '0'))
          .join('');
      String hexValue = '0x$hex';
      hexList.add(hexValue);
    }

    return hexList;
  }

  void sendRgbArrayToArduino(List<List<int>> rgbArray) {
    print('HI');
    // Convert RGB array to a character array
    final charArray = <String>[];
    for (final row in rgbArray) {
      for (final pixel in row) {
        final char = String.fromCharCode(pixel);
        print('HIII $char');
        charArray.add(char);
      }
    }

    // Send the character array to Arduino
    final arduinoData = charArray.join();
    // TODO: Implement code to send data to Arduino
    print('Arduinio Data  $arduinoData');
    print(arduinoData);
    // FlutterClip
  }

  String _getFileSize(String path) {
    return '${(File(path).lengthSync() / 1024 / 1024).toStringAsFixed(2)} MB';
  }
}

String convertToHex(List<int> rgbValues) {
  String hexValue = '';

  for (int value in rgbValues) {
    String hex = value.toRadixString(16).padLeft(2, '0');
    hexValue += hex;
  }

  return '0x$hexValue';
}

// Future<List<List<int>>> imageToRGBArray(Image image) async {
//   // Convert Flutter Image to Uint8List
//   // image.image.
//   // final ByteData byteData = await image.image.toByteData(format: ImageByteFormat.rawRgba);
//   // final Uint8List imageData = byteData.buffer.asUint8List();

//   // Compress image using flutter_image_compress
//   // final compressedData = await FlutterImageCompress.compressWithList(imageData,
//       // minHeight: 1, minWidth: 1, format: CompressFormat.png);

//   // Decode the compressed image into an RGB array using the image package
//   // final decodedImage = imagi.decodeImage(compressedData);

//   // Extract RGB values from the decoded image and return as a 2D array
//   final rgbArray = <List<int>>[];
//   // for (var y = 0; y < decodedImage.height; y++) {
//     // final row = <int>[];
//     // for (var x = 0; x < decodedImage.width; x++) {
//       // final pixel = decodedImage.getPixel(x, y);
//       // final r = img.getRed(pixel);
//       // final g = img.getGreen(pixel);
//       // final b = img.getBlue(pixel);
//       // row.add(r);
//       // row.add(g);
//       // row.add(b);
//     // }
//     // rgbArray.add(row);
//   }

//   // return rgbArray;
// }

// for (int x = 0; x < 256; x++) {
//   int red = decodedBytes[x * 3];
//   int green = decodedBytes[x * 3 + 1];
//   int blue = decodedBytes[x * 3 + 2];
//   imgArray.add([red, green, blue]);
// }

// 0xf6ffff,0xf7ffff,0xfafef0,0xfbfff1,0xfffbff,0xfffaff,0xfbfffa,0xfbfffa,0xfbfffa,0xfbfffa,0xfffaff,0xfffbff,0xfbfff1,0xfafef0,0xf7ffff,0xf6ffff,
// 0xf7ffff,0xf3fdff,0xfefff4,0xfbfff1,0xfffbff,0xfffbff,0xf6fdf5,0xf8fff7,0xf8fff7,0xf6fdf5,0xfffbff,0xfffbff,0xfbfff1,0xfefff4,0xf3fdff,0xf7ffff,
// 0xfffeff,0xfffdfe,0xf3f5f2,0xfbfdfa,0xfff4ff,0xfff5ff,0x5a0000,0x570000,0x570000,0x5a0000,0xfff5ff,0xfff4ff,0xfbfdfa,0xf3f5f2,0xfffdfe,0xfffeff,
// 0xfffeff,0xfffbfc,0xfbfdfa,0xfdfffc,0x080007,0x080007,0xa24641,0xa14540,0xa14540,0xa24641,0x080007,0x080007,0xfdfffc,0xfbfdfa,0xfffbfc,0xfffeff,
// 0xfffefb,0xfffcf9,0xfbffff,0x01060c,0xe61727,0xed1e2e,0xf42e2b,0xe6201d,0xe6201d,0xf42e2b,0xed1e2e,0xe61727,0x01060c,0xfbffff,0xfffcf9,0xfffefb,
// 0xfcf8f5,0xfffefb,0xf9feff,0x00040a,0xf22333,0xe41525,0xf02a27,0xe7211e,0xe7211e,0xf02a27,0xe41525,0xf22333,0x00040a,0xf9feff,0xfffefb,0xfcf8f5,
// 0xfffffa,0xfffcf7,0x450000,0x8e453f,0xf42116,0xff3227,0x6a4c4e,0x1b0000,0x1b0000,0x6a4c4e,0xff3227,0xf42116,0x8e453f,0x450000,0xfffcf7,0xfffffa,
// 0xfffffa,0xfaf7f2,0x500701,0x924943,0xf32015,0xf01d12,0x1d0001,0xffeef0,0xffeef0,0x1d0001,0xf01d12,0xf32015,0x914842,0x500701,0xfaf7f2,0xfffffa,
// 0xfffcfa,0xfffcfa,0x000200,0x010400,0x05060a,0x000004,0x0a0000,0xfffafd,0xfffafd,0x0a0000,0x000004,0x05060a,0x010400,0x000200,0xfffcfa,0xfffbf9,
// 0xfffaf8,0xfff5f3,0x080b02,0xfefff8,0xfcfdff,0xfeffff,0xfff9fc,0x0a0000,0x0a0000,0xfff9fc,0xfeffff,0xfcfdff,0xfefff8,0x080b02,0xfff5f3,0xfffaf8,
// 0xfbfdff,0xfafcff,0xf5fbf9,0x000402,0xfeffff,0xfafbff,0xf8fff7,0xfbfffa,0xfbfffa,0xf8fff7,0xfafbff,0xfeffff,0x000402,0xf5fbf9,0xfafcff,0xfbfdff,
// 0xf8faff,0xfbfdff,0xfbffff,0x000402,0xf8f9fe,0xfeffff,0xfbfffa,0xf7fef6,0xf7fef6,0xfbfffa,0xfeffff,0xf8f9fe,0x000402,0xfbffff,0xfbfdff,0xf8faff,
// 0xfffdf1,0xfff9ed,0xfffeff,0xfaf8fb,0x030102,0x040203,0xf7fffd,0xf7fffd,0xf7fffd,0xf7fffd,0x040203,0x030102,0xfaf8fb,0xfffeff,0xfff9ed,0xfffdf1,
// 0xfffdf1,0xfff8ec,0xfdfbfe,0xfffeff,0xfbf9fa,0xfbf9fa,0x000b04,0x000500,0x000500,0x000b04,0xfbf9fa,0xfbf9fa,0xfffeff,0xfdfbfe,0xfff8ec,0xfffdf1,
// 0xf8fefa,0xf9fffb,0xfffffd,0xfffffd,0xfefeff,0xfefeff,0xfff7f5,0xfffcfa,0xfffcfa,0xfff7f5,0xfefeff,0xfefeff,0xfffffd,0xfffffd,0xf9fffb,0xf8fefa,
// 0xfafffc,0xf7fdf9,0xfffffd,0xfdfcfa,0xfcfcff,0xf8f8ff,0xfffcfa,0xfff7f5,0xfff7f5,0xfffcfa,0xf8f8ff,0xfcfcff,0xfdfcfa,0xfffffd,0xf7fdf9,0xfafffc



